#!/usr/bin/env node
"use strict";

if( process.argv.length < 5 ) {
	console.log( "Usage: resistorFinder [a] [b] [e]\nFinds two resitors with best matching ratio a/b in series e" );
	process.exit(1);
}

// Read arguments
let a = parseInt( process.argv[2] );
let b = parseInt( process.argv[3] );
let e = parseInt( process.argv[4] );

// Make some hints, if series is not defined in DIN IEC 60063
if( e != 3 && e != 6 && e != 12 &&
    e != 24 && e != 48 && e != 96 && e != 192 ) {
	console.log( "Series E" + e + " not defined in DIN IEC 60063. Valid: 3, 6, 12, 24, 48, 96, 192" );
	process.exit(1);
}

// Ratio must be less than 1
if( a >= b ) {
	console.log( "The ratio must be less than 1!" );
	process.exit(1);
}

// Create series
let series = [];
let base = Math.pow( 10, 1/e )
let factor = (e >= 48) ? 100 : 10;
for( let m = 0; m < e; m++ ) {

	// Calculate resistor value
	let value = Math.round( Math.pow( base, m ) * factor );

	// Some exceptions ...
	if( e <= 24 ) switch( value ) {
		case 26: value = 27; break;
		case 29: value = 30; break;
		case 32: value = 33; break;
		case 35: value = 36; break;
		case 38: value = 39; break;
		case 42: value = 43; break;
		case 46: value = 47; break;
		case 83: value = 82; break;
	}

	series.push( value );
}
console.log( "E" + e + " Series: " + series.join(", ") );

// Get required ratio
let ratio = a / b;
console.log( "Required ratio: " + a + "/" + b + " = " + ratio );

// Go through all possible rows and find the best ratio
let rows = [];
for( let x = 0; x < series.length; x++ ) {

	let y = x;
	let lastErr, lastValue;
	let err = 1;
	let mult = 1;
	let value;

	do {

		// Store last result. It might be a good choice!
		lastErr = err;
		lastValue = value;

		// Calculate new result
		value = mult * series[ y ];
		let test = series[ x ] / value;
		err = Math.pow( test - ratio, 2 );
		if( ++y == series.length ) {
			y = 0;
			mult *= 10;
		}

	} while( lastErr > err );

	// Store the last result. It was the best one in the current row
	rows[x] = {
		err: lastErr,
		valueA: series[ x ],
		valueB: lastValue,
		ratio: series[ x ] / lastValue
	};

}

// Find best row
let bestRow = 0;
let bestRowErr = 1;
for( let x = 0; x < series.length; x++ ) {
	if( rows[x].err < bestRowErr ) {
		bestRowErr = rows[x].err;
		bestRow = x;
	}
}
let result = rows[ bestRow ];


// Output information
console.log( "Found ratio:    " + result.ratio );
console.log( "Error^2:        " + result.err );
console.log( "R_a:            " + result.valueA + " Ohm" );
console.log( "R_b:            " + result.valueB + " Ohm" );
